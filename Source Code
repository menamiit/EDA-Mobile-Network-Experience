import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Importing the Excel file
df = pd.read_excel('C:/Users/Acer/Downloads/Python Project/rawData.xlsx')


# Dataset Summary
print(df.info())
print(df.describe())

# Make a working copy of the original data
df_clean = df.copy()

# Step 1: Replace placeholder values in latitude and longitude
df_clean[['latitude', 'longitude']] = df_clean[['latitude', 'longitude']].replace(-1.0, np.nan)

# Missing values count before cleaning
print("\nMissing values before cleaning:")
print(df_clean.isnull().sum())

# Dropped rows where both latitude and longitude are missing (they're not useful)
df_clean = df_clean[~(df_clean['latitude'].isna() & df_clean['longitude'].isna())]

# Dropped rows where state_name is missing
# Here we drop them since we can't impute them reliably without geo lookup
df_clean = df_clean[df_clean['state_name'].notna()]

# Strip whitespace and standardize case in string columns
str_cols = ['inout_travelling', 'operator', 'network_type', 'calldrop_category', 'state_name']
for col in str_cols:
    df_clean[col] = df_clean[col].str.strip().str.title()

# Final missing values check after cleaning
print("\nMissing values after cleaning:")
print(df_clean.isnull().sum())

# Cleaned data preview
print("\nCleaned DataFrame preview:")
print(df_clean.head())


# 1. Rating distribution
plt.figure(figsize=(6, 4))
sns.countplot(data=df_clean, x='rating', palette='viridis')
plt.title('Rating Distribution')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.grid(True)
plt.show()

# 2. Frequency of Call Drop Categories
plt.figure(figsize=(10, 4))
sns.countplot(data=df_clean, y='calldrop_category', order=df_clean['calldrop_category'].value_counts().index, palette='magma')
plt.title('Call Drop Category Frequency')
plt.xlabel('Count')
plt.ylabel('Category')
plt.grid(True)
plt.show()

# 3. Operator-wise Average Rating
plt.figure(figsize=(8, 4))
sns.barplot(data=df_clean, x='operator', y='rating', ci=None, palette='Set2')
plt.title('Operator-wise Average Rating')
plt.xlabel('Operator')
plt.ylabel('Average Rating')
plt.grid(True)
plt.show()

# 4. Network Type vs Rating
plt.figure(figsize=(6, 4))
sns.boxplot(data=df_clean, x='network_type', y='rating', palette='coolwarm')
plt.title('Network Type vs Rating')
plt.xlabel('Network Type')
plt.ylabel('Rating')
plt.grid(True)
plt.show()

# 5. Monthly Trend of Ratings
plt.figure(figsize=(10, 4))
sns.lineplot(data=df_clean, x='month', y='rating', hue='year', marker='o', palette='tab10')
plt.title('Monthly Trend of Ratings')
plt.xlabel('Month')
plt.ylabel('Average Rating')
plt.grid(True)
plt.show()


# Normalisation
scaler = MinMaxScaler()
df_clean[['rating', 'latitude', 'longitude']] = scaler.fit_transform(df_clean[['rating', 'latitude', 'longitude']])
print("\nAfter Normalisation")
print(df_clean[['rating', 'latitude', 'longitude']].describe())

# Scatter Plot
plt.scatter(df_clean['latitude'], df_clean['rating'])
plt.xlabel('Latitude (Normalized)')
plt.ylabel('Rating (Normalized)')
plt.title('Scatterplot: Latitude vs Rating')
plt.grid(True)
plt.show()

# Linear Regression Model
x = df_clean[['latitude']]
y = df_clean['rating']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)
model = LinearRegression()
model.fit(x_train, y_train)

# Predict
check_location = pd.DataFrame({'latitude': [scaler.transform([[0, 20.5, 0]])[0][1]]})
result = model.predict(check_location)
print("Predicted Rating for Latitude 20.5: ", result[0])

# Plot Regression Line
plt.scatter(x, y, color="blue", alpha=0.5)
plt.plot(x, model.predict(x), color="red", linewidth=2)
plt.xlabel('Latitude (Normalized)')
plt.ylabel('Rating (Normalized)')
plt.title('Linear Regression Fit: Latitude vs Rating')
plt.grid(True)
plt.show()

# Mean Squared Error
y_pred = model.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse:.4f}")

